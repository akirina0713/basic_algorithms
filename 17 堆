/*最基本的三个操作：1：插入一个数 heap[++size] = x; up(size);
2：求集合当中的最小值  heap[1];
3：删除最小值  heap[1] = heap[size] size -- ;down(1);
4：删除任意一个元素  heap[k] = heap[size]; size--; down(k) or up(k);
5：修改任意一个元素   heap[k] = x; down(k) or up(k);
堆是一颗完全二叉树   使用数组模拟堆，数组的最后一个元素易删除和修改，所以是通过heap[size] 来进行操作   下标：x的左儿子：2x，x的右儿子：2x+1*/

/*输入一个长度为 n的整数数列，从小到大输出前 m 小的数。
输入格式
第一行包含整数 n 和 m。
第二行包含 n 个整数，表示整数数列。
输出格式
共一行，包含 m 个整数，表示整数数列中前 m 小的数。*/

#include <iostream>
#include <algorithm>
using namespace std;

const int N = 100010;
int n, m;
int heap[N], size;//size 是堆的长度，下标从1开始

void down(int u);
{
    int t = u;  //t记录最小点的编号
    if(u * 2 <= size && heap[u * 2] < heap[t])  t = u * 2;
    if(u * 2 + 1 <= size && heap[u * 2 + 1] < heap[t]  t = u * 2 + 1;
    if(u != t)   //如果待调整点不是最小的   3个点中最小的 ：根 左儿子 右儿子
    {
        swap(heap[u],heap[t]);    //和最小的交换
        down(t);    //递归处理
    }
}


void up(int u);
{
  while(u / 2 && heap[u / 2] > heap[u])
    {
        swap(heap[u / 2], heap[u]);
        u /= 2;
    }
}

int main()
{
  scanf("%d%d", &n, &m);
  for(int i = 1;i <= n; i ++) scanf("%d", &heap[i]);
  size = n;

  for(int i = n / 2; i; i --) down(i);   //从第一个非叶节点开始，从右到左，从下到上处理每个节点

  while(m --)   //输出前m小的数
  {
    printf("%d ", heap[1]);  
    heap[1] = heap[szie];  //输出完一个后进行调整。然后输出下一个数
    size --;
    down(1);
  }
  return 0;
}
