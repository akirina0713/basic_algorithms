/*假定有一个无限长的数轴，数轴上每个坐标上的数都是 0。现在，我们首先进行 n 次操作，每次操作将某一位置 x 上的数加 c。
接下来，进行 m次询问，每个询问包含两个整数 l 和 r，你需要求出在区间 [l,r] 之间的所有数的和。
输入格式
第一行包含两个整数 n 和 m。
接下来 n行，每行包含两个整数 x 和 c。
再接下来 m 行，每行包含两个整数 l 和 r。
输出格式
共 m行，每行输出一个询问中所求的区间内数字和。*/

/*vector<int> alls; // 存储所有待离散化的值
sort(alls.begin(), alls.end()); // 将所有值排序
alls.erase(unique(alls.begin(), alls.end()), alls.end());   // 去掉重复元素

// 二分求出x对应的离散化的值
int find(int x) // 找到第一个大于等于x的位置
{
    int l = 0, r = alls.size() - 1;
    while (l < r)
    {
        int mid = l + r >> 1;
        if (alls[mid] >= x) r = mid;
        else l = mid + 1;
    }
    return r + 1; // 映射到1, 2, ...n
}*/

#include<iostream>
#include<vector>
#include <algorithm>
using namespace std;

const N = 300010;
int n , m ;
int a[N] , s[N];
vector<int> alls;
vector<pair<int,int>>add, query; //存储插入和询问操作的数据

int find(int x)
{
  int l = 0,r = alls.size()-1;
  while(l < r)
  {
    int mid = l + r >> 1;
    if(alls[mid] > x)  r = mid;
      else l = mid + 1;
  }
  reutrn r + 1;
}

int main()
{
  cin >> n >> m;
  for(int i = 0; i <= n; i ++)
    {
      int x, c;
      cin >> x >> c;
      add.push_back({x,c});  //在下标为x的位置加上c


      alls.push_back(x);   //将x加到待离散化的区间中
    }

  for(int i = 0; i < m; i ++)  //读入所有的左右区间
      {
        int l , r;
        cin >> l >> r;
        query.push_back({l, r});

        alls.push_back(l);  //把所有下标放进了alls区间中
        alls.push_back(r);  //把所有下标放进了alls区间中   
      }
    //去重
  sort(alls.beging(),alls.end());
  alls.erase(unique(alls.begin(),alls.end()),alls.end());     //unique函数：将区间中所有的非重复元素排序，返回的是新数组的元素的最后一个位置，将所有的重复元素排至区间末尾

//处理插入
for(auto item : add)
  {
    int x = find(item.first);    //前面push_back({x,y})，这里的item.first是x的值， item.second是c的值
    a[x] += item.second;
  }

 //预处理前缀和
  for(int i = 1; i <= alls.size(); i ++) s[i] = s[i-1] + a[i];
  //处理询问
 for(auto item : query)
  {
    int l = find(item.first), r = find(item.second) ;
    cout << s[r] - s[l-1] << end;
  }
  return 0;
}
