/*维护一个集合，支持如下几种操作：
I x，插入一个整数 x；
Q x，询问整数 x 是否在集合中出现过；
现在要进行 N 次操作，对于每个询问操作输出对应的结果。
输入格式第一行包含整数 N，表示操作数量。
接下来 N 行，每行包含一个操作指令，操作指令为 I x，Q x 中的一种。
输出格式
对于每个询问指令 Q x，输出一个询问结果，如果 x 在集合中出现过，则输出 Yes，否则输出 No。每个结果占一行。*/

//拉链法
#include<iostream>
#include<cstring>
using namespace std;
const int N = 100003;   模数最好取质数，离十万最近的质数为100003
int h[N], e[N], ne[N], idx;    //用到了单链表

void insert(int x)
{
   int k = (x % N + N) % N;   //加 N 再模 N 的目的是防止出现负数   k 就是哈希值 
   e[idx] = x;                   //将 e “拆”成了多个链表
   ne[idx] = h[k];          //数组模拟链表  头插法
   h[k] = idx ++; 
} 

bool find(int x)
{
  int k = (x % N + N) % N;
  for(int i = 0; i != -1; i = ne[i])
    if(e[i] == x)
      return ture;
  return flase;
}

int main()
{
  int n;
  scanf("%d", &n);
  memset(h, -1, sizeof h);  
//作用：是在一段内存块中填充某个给定的值，它是对较大的结构体或数组进行清零操作的一种最快方法  memset(void *str, int c, size_t n)  给数组赋值c
  while(n --)
    {
      char op[2];
      int x;
      scanf("%s%d", op, &x);
      if(op == "I") insert(x);
      else 
        {
          if(find(x)); put("Yes");
          else puts("No");
        }
    }
}



//开放寻址法    即当前位置已经使用，则位置加1 直到找到一个空位置插入
#include<iostream>
#include<cstring>
using namespace std;
const int N = 200003, null = 0x3f3f3f;   //模数最好取质数，离二十万最近的质数为200003  
//最好为数值范围的2~3倍   规定空指针为 null 0x3f3f3f3f 即不在数据范围内
int h[N];

int find(int x)
{
  int k = (x % N + N) % N;
  while(h[k] != null && h[k] != x)   //该位置不为空且已经使用
    {
      k++;
      if(k == N) k = 0;//如果到最后一个位置洞已使用，则从第一个位置开始寻找空位
    } 
    return k;
}

int main()
{
  int n;
  scanf("%d", &n);
  memset(h, 0x3f, sizeof h);  //是按字节来进行memset  不是按数来进行 ，int 有四个字节大的话就会把每个字节都变成3f3f
//作用：是在一段内存块中填充某个给定的值，它是对较大的结构体或数组进行清零操作的一种最快方法  memset(void *str, int c, size_t n)  给数组赋值c
  while(n --)
    {
      char op[2];
      int x;
      scanf("%s%d", op, &x);
           int k = find(x);
      if(op == "I")   h[k] = x;
      else 
        {
          if(h[k] != null); put("Yes");
          else puts("No");
        }
    }
}

//开放寻址法更简单
