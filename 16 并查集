/*一共有 n个数，编号是 1∼n，最开始每个数各自在一个集合中。现在要进行 m 个操作，操作共有两种：
M a b，将编号为 a和 b的两个数所在的集合合并，如果两个数已经在同一个集合中，则忽略这个操作；
Q a b，询问编号为 a和 b 的两个数是否在同一个集合中；
输入格式
第一行输入整数 n 和 m。
接下来 m 行，每行包含一个操作指令，指令为 M a b 或 Q a b 中的一种。
输出格式对于每个询问指令 Q a b，都要输出一个结果，如果 a 和 b 在同一集合内，则输出 Yes，否则输出 No。每个结果占一行。*/

//并查集支持的操作： 1。将两个集合合并，2.询问两个元素是否在一个集合当中
//基本原理：每一个集合用一颗树来表示，树根的编号就是整个集合的编号。 每个节点存储他的父节点，p[x]表示x的父节点
//问题1：如何判断树根：if（p[x] == x）
//问题2：如何求x的集合编号：while(p[x]!=x) x=p[x];
//问题3：如何合并两个集合p[x]是x的集合编号，p[y]是y的集合编号。使p[x] = y 时，合并完成

#include<isotream>
using namespace std;
const int N = 100010;
int n, m;
int p[N];
int find(int x)   //返回x的祖宗节点，同时对路径进行压缩
{
  if(x != p[x]) p[x] = find(p[x]);
  return p[x];
}

//合并a b所在的两个集合
void merge(int a, int b)
{
    int pa = find(a);//找到 a 所在集合的代表元素
    int pb = find(b);//找到 b 所在集合的代表元素
    if(pa != pb)//如果不是同一个，则属于不同集合，需要合并
    {
        p[pa] = pb;//将a集合合并到b集合中
    }
}

int main()
{
  scamnf("%d%d",&n, &m);
  for(int = 0; i <= n; i++) p[i] = i;
  while(m --)
  {
    char op[2];
    int a, b;
    scanf("%s%d%d",op, &a, &b);
    if(op == 'M')  merge(a, b);
    else 
    {
        if(find(a) == find(b)) puts("Yes");  /a和b在一个集合里面
        else puts("No");
    }
  }
return 0;
}
