/*给定一个长度为 n的整数数列，请你计算数列中的逆序对的数量。
   逆序对的定义如下：对于数列的第 i个和第 j个元素，如果满足 i<j且 a[i]>a[j]，则其为一个逆序对；否则不是。
输入格式
第一行包含整数 n，表示数列的长度。
第二行包含 n个整数，表示整个数列。
输出格式
输出一个整数，表示逆序对的个数。*/
#include<iostream>
using namespace std;
const int N=100010;
int n;
int q[N],temp[N];
long long merge_sort(int l,int r)
{
  if(l>=r) return 0;
  int mid =l + r >> 1;
  long long res=merge_sort(l,mid)+merge_sort(mid+1,r);

  //归并过程
  int k = 0,i = l,j = r;
  while(i <= mid && j <= r)
    {
        if(q[i] <= q[j]) temp[k++] =q [i++];
        else 
            {
              temp[k++] = q[j++];
              res += mid-i+1;  //q[i]>q[j]   即为一对逆序对 此时q[i]前的所有数必比q[j]小  
            }
    }
  //扫尾
  while(i <= mid) temp[k++] = q[i++];
  while(j <= r)   temp[k++] = q[j++];
  //物归原主
  for(int i = l,j = 0;i <= r;i ++,j ++)  q[i] = temp[j];
}
int main()
{
  cin>>n;
  for(int i=0;i<n;i++) cin>>q[i];
  cout<<merge_sort(0,n-1)<<endl;
  return 0;
}
