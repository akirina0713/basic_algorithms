/*最基本的三个操作：1：插入一个数 heap[++size] = x; up(size);
2：求集合当中的最小值  heap[1];
3：删除最小值  heap[1] = heap[size] size -- ;down(1);
4：删除任意一个元素  heap[k] = heap[size]; size--; down(k) or up(k);
5：修改任意一个元素   heap[k] = x; down(k) or up(k);
堆是一颗完全二叉树   使用数组模拟堆，数组的最后一个元素易删除和修改，所以是通过heap[size] 来进行操作   下标：x的左儿子：2x，x的右儿子：2x+1*/

/*维护一个集合，初始时集合为空，支持如下几种操作：
I x，插入一个数 x；
PM，输出当前集合中的最小值；
DM，删除当前集合中的最小值（数据保证此时的最小值唯一）；
D k，删除第 k 个插入的数；
C k x，修改第 k 个插入的数，将其变为 x；
现在要进行 N 次操作，对于所有第 2 个操作，输出当前集合的最小值。
输入格式
第一行包含整数 N。接下来 N 行，每行包含一个操作指令，操作指令为 I x，PM，DM，D k 或 C k x 中的一种。
输出格式
对于每个输出指令 PM，输出一个结果，表示当前集合中的最小值。每个结果占一行。*/

#include <iostream>
#include <algorithm>
#include <string.h>
using namespace std;

const int N = 100010;
int n, m;
int heap[N], ph[N], hp[N], size;//size 是堆的长度，下标从1开始   ph存储的是第k个插入点在堆中的下标，hp是堆中的某个点是第x个插入的点

void heap_swap(int a, int b)
{
  swap(ph[hp[a]], ph[hp[b]])  //ph存储的是第k个插入点在堆中的下标，hp是堆中的k个点是第x个插入的点
  swap(hp[a], hp[b]);
  swap(heap[a], heap[b]);
}

void down(int u);
{
    int t = u;  //t记录最小点的编号
    if(u * 2 <= size && heap[u * 2] < heap[t])  t = u * 2;
    if(u * 2 + 1 <= size && heap[u * 2 + 1] < heap[t]  t = u * 2 + 1;
    if(u != t)   //如果待调整点不是最小的   3个点中最小的 ：根 左儿子 右儿子
    {
        heap_swap(u,t);    //和最小的交换
        down(t);    //递归处理
    }
}

void up(int u);
{
  while(u / 2 && heap[u / 2] > heap[u])
    {
        heap_swap(u / 2, u);
        u /= 2;
    }
}

int main()
{
  int n, m = 0;
  scanf("%d", &n);
  int k, x;
  while(n --)
    {
      char op[10];
      scanf("%s", op);
      if(!strcmp(op, "I"))   //strcmp(str1, str2)  比较两个字符串，如果相等，返回0，如果第一个大则返回正数，如果第二个大则返回负数
        {
          scanf("%d", &x);
          size ++;
          m ++;
          ph[m] = size;  //第m个插入的数在堆中的位置为size
          hp[size] = m;  //堆中位置为size的点是第m个插入的
          heap[size] = x;
          up(size);
        }
      else if(!strcmp(op, "PM")) printf("%d\n",heap[1]);
      else if(!strcmp(op, "DM")) 
        {
          heap_swwap(1,size);
          size --;
          down(1);
        }
      else if(!strcmp(op, "D"))
        {
          scanf("%d", &k);
          k = ph[k];
          heap_swap(k, size);
          size --;
          down(k), up(k);  //down 和 up 最多只会执行其中之一 
        }
      else 
        {
          scanf("%d%d", &k, &x);
          k = ph[k];
          heap[k] = x;
          down(k), up(k);
        }
    }
  return 0;
}
