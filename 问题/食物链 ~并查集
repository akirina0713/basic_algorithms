/*动物王国中有三类动物 A,B,C，这三类动物的食物链构成了有趣的环形。
A 吃 B，B 吃 C，C 吃 A。
现有 N 个动物，以 1∼N 编号。
每个动物都是 A,B,C 中的一种，但是我们并不知道它到底是哪一种。
有人用两种说法对这 N 个动物所构成的食物链关系进行描述：
第一种说法是 1 X Y，表示 X 和 Y 是同类。
第二种说法是 2 X Y，表示 X 吃 Y。
此人对 N 个动物，用上述两种说法，一句接一句地说出 K 句话，这 K 句话有的是真的，有的是假的。
当一句话满足下列三条之一时，这句话就是假话，否则就是真话。
当前的话与前面的某些真的话冲突，就是假话；
当前的话中 X 或 Y 比 N 大，就是假话；当前的话表示 X 吃 X，就是假话。
你的任务是根据给定的 N 和 K 句话，输出假话的总数。
输入格式
第一行是两个整数 N 和 K，以一个空格分隔。以下 K 行每行是三个正整数 D，X，Y，两数之间用一个空格隔开，其中 D 表示说法的种类。
若 D=1，则表示 X 和 Y 是同类。
若 D=2，则表示 X 吃 Y。*/ 

#include<iostream>
using namespace std;
const int N = 100010;

int n, k;
int p[N], d[N];  //p是集的数组，d是权重  即p[]寻找祖宗节点，d[]求到祖宗节点的距离

int find(x)
{
  if(p[x] != x) 
    {
        int t = find(p[x]);  // t暂时存一下p[x]的根节点，辅助变量
        d[x] += d[p[x]];     // 更新x到根节点的距离  距离为: x 到其父节点 p[x] 的距离加上其父节点 p[x] 到根节点的距离
        p[x] = t; 
    }
    return p[x];
}

int main()
{
  scanf("%d%d", &n, &k);
  for(int i = 1; i <= n ; i ++) p[i] = i;
  int res = 0;  //假话的值
  while(k --)
  {
    int D, x, y;
    scanf("%d%d%d", &D, &x, &y);
    if(x > n || y > n) res ++;  //即x 和 y 的值大于输入的值 肯定为假话 
    else 
    {
        int px = find(x), py = find(y);  //查找x 与 y 的根节点
        if(D == 1)   //  D = 1 ，认为 x 与 y 是同类
        {
            if(px == py && (d[x] - d[y]) % 3)  res ++;  //x 与 y 根节点相同，即在同一集合中  两数到根节点距离之差的模不为 0，说明不是同一类，是假话
            else if(px != py)  //根节点不同
             {
                p[px] = py;
                d[px] = d[y] - d[x];   //因为 (d[x] + d[px] - d[y]) % 3 == 0  即合并完之后 x 与 y 是同类，  所以可得d[px] = d[y] - d[x];
             }
         }
         else    // X 是否吃 Y
         {
           if (px == py && (d[x] - d[y] - 1) % 3)  res ++;   // 若 X 吃 Y，则 d[x] 比 d[y] 大 1             余1： 可以吃根节点
           else if(px != py)                                                                             //余2： 可以被根节点吃
             {                                                                                           //余3： 与根节点是同类
                p[px] = py;   
                d[px] = d[y] + 1 - d[x];                
             }
         }
    }
  printf("%d", res);
  return 0;
}
